// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

model User {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String    @unique
  emailVerified  DateTime?
  password       String?
  image          String?
  accounts       Account[]
  sessions       Session[]
  practitioners  Practitioner[]
}

model Account {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  userId            String @db.ObjectId
  user              User   @relation(fields: [userId], references: [id])
}

model Session {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model Practitioner {
  id                 String @id @default(auto()) @map("_id") @db.ObjectId
  firstName          String
  lastName           String
  pronouns           String
  emailPublic        String
  emailInternal      String
  emailAlternate     String
  phoneContact       String
  bio                String
  headline           String
  yogaStyle          String
  yogaExperience     String
  Facebook           String
  Google             String
  Patreon            String
  Twitch             String
  Twitter            String
  websiteURL         String
  blogURL            String
  socialURL          String
  streamingURL       String
  isInstructor       String
  isStudent          String
  isPrivate          String
  calendar           String
  timezone           String
  location           String
  isLocationPublic   String
  exportAccountInfo  String
  deleteAccountInfo  String
  company            String
  userId             String @db.ObjectId
  user               User   @relation(fields: [userId], references: [id])
}

model Series {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  seriesName     String
  seriesPostures String[]
}

model FlowSeries {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  seriesName     String
  seriesSet      String
}

model Sequence {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  nameSequence    String
  sequencesSeries SequencesSeries[]
}

model SequencesSeries {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  seriesName   String
  seriesSet    String[]
  sequenceId   String   @db.ObjectId
  sequence     Sequence @relation(fields: [sequenceId], references: [id])
}

model Posture {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  aka             String[]
  benefits        String
  category        String
  description     String
  difficulty      String
  display_name    String
  name            String
  next_poses      String[]
  preferred_side  String
  previous_poses  String[]
  sanskrit_names  SanskritName[]
  sideways        Boolean
  sort_name       String
  subcategory     String
  two_sided       Boolean
  variations      Json?
  visibility      String
}

model SanskritName {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  latin          String
  devanagari     String
  simplified     String
  translation    Translation[]
  postureId      String         @db.ObjectId
  posture        Posture        @relation(fields: [postureId], references: [id])
}

model Translation {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  latin          String
  devanagari     String
  simplified     String
  description    String
  sanskritNameId String        @db.ObjectId
  sanskritName   SanskritName  @relation(fields: [sanskritNameId], references: [id])
}
