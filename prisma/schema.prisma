// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "mongodb" // or your database provider
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "/generated/client"
}

model User {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String    @unique
  emailVerified  DateTime?
  password       String?
  image          String?
  accounts       Account[]
  sessions       Session[]
}

model Account {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  userId            String @db.ObjectId
  user              User   @relation(fields: [userId], references: [id])
}

model Session {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model Practitioner {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  firstName    String
  lastName     String
  pronouns     String
  emailPublic  String
  emailInternal  String
  emailAlternate  String
  phoneContact        String
  bio        String
  headline      String
  yogaStyle         String
  yogaExperience        String
  Facebook      String
  Google        String
  Patreon       String
  Twitch        String
  Twitter       String
  websiteURL    String
  blogURL       String
  socialURL     String
  streamingURL  String
  isInstructor  String
  isStudent     String
  isPrivate     String
  calendar       String
  timezone       String
  location       String
  isLocationPublic       String
  exportAccountInfo       String
  deleteAccountInfo       String
  deleteAccountInfo       String
  company       String
  userId        String @db.ObjectId
  user         User   @relation(fields: [userId], references: [id])
}

model AsanaPostures {
}

model Series {
  seriesName    String
  seriesPostures  String[]
}

model FlowSeries {
  id            Int        @id @default(autoincrement())
  seriesName    String
  seriesSet   String
}

model Sequence {
  id             Int        @id @default(autoincrement())
  nameSequence      String
  sequencesSeries  SequencesSeries[]
}

model SequencesSeries {
  seriesName    String
  seriesSet     String[]
}

model Posture {
  id              Int        @id @default(autoincrement())
  aka             String[]
  benefits        String
  category        String
  description     String
  difficulty      String
  display_name    String
  name            String
  next_poses      String[]
  preferred_side  String
  previous_poses  String[]
  sanskrit_names  SanskritName[]
  sideways        Boolean
  sort_name       String
  subcategory     String
  two_sided       Boolean
  variations      Json?
  visibility      String
}

model SanskritName {
  id             Int        @id @default(autoincrement())
  latin          String
  devanagari     String
  simplified     String
  translation    Translation[]
  postureId      Int
  posture        Posture     @relation(fields: [postureId], references: [id])
}

model Translation {
  id            Int        @id @default(autoincrement())
  latin         String
  devanagari    String
  simplified    String
  description   String
  sanskritNameId Int
  sanskritName  SanskritName @relation(fields: [sanskritNameId], references: [id])
}