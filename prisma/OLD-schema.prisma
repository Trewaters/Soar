datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}
  // DbName_prod = "YogaDB"
  // DbName_dev = "yogaDBSandbox"

// https://www.prisma.io/docs/orm/overview/databases/mongodb

generator client {
  provider      = "prisma-client-js"
  output        = "./generated/client"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

model UserData {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  provider_id   String?       @unique
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  pronouns      String?
  accounts      Account[]
  sessions      Session[]
  profile       Json?
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Practitioner Practitioner[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     Json?

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user              UserData @relation(fields: [userId], references: [id], onDelete: Cascade)

  // @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         UserData     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user UserData @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

// model Practitioner {
//   id                String @id @default(auto()) @map("_id") @db.ObjectId
//   firstName         String
//   lastName          String
//   bio               String
//   headline          String
//   location          String
//   websiteURL        String
//   pronouns          String
//   emailPublic       String
//   emailInternal     String
//   emailAlternate    String
//   phoneContact      String
//   yogaStyle         String
//   yogaExperience    String
//   Facebook          String
//   Google            String
//   Patreon           String
//   Twitch            String
//   Twitter           String
//   blogURL           String
//   socialURL         String
//   streamingURL      String
//   isInstructor      String
//   isStudent         String
//   isPrivate         String
//   calendar          String
//   timezone          String
//   isLocationPublic  String
//   exportAccountInfo String
//   deleteAccountInfo String
//   company           String
//   userId            String @db.ObjectId
//   user              UserData   @relation(fields: [userId], references: [id])
// }

model Series {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  seriesName     String
  seriesPostures String[]
}

model FlowSeries {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  seriesName String
  seriesSet  String
}

model Sequence {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  nameSequence    String
  sequencesSeries SequencesSeries[]
}

model SequencesSeries {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  seriesName String
  seriesSet  String[]
  sequenceId String   @db.ObjectId
  sequence   Sequence @relation(fields: [sequenceId], references: [id])
}

model Posture {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  aka            String[]
  benefits       String
  category       String
  description    String
  difficulty     String
  display_name   String
  name           String
  next_poses     String[]
  preferred_side String
  previous_poses String[]
  sanskrit_names SanskritName[]
  sideways       Boolean
  sort_name      String
  subcategory    String
  two_sided      Boolean
  variations     Json?
  visibility     String
}

model SanskritName {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  latin       String
  devanagari  String
  simplified  String
  translation Translation[]
  postureId   String        @db.ObjectId
  posture     Posture       @relation(fields: [postureId], references: [id])
}

model Translation {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  latin          String
  devanagari     String
  simplified     String
  description    String
  sanskritNameId String       @db.ObjectId
  sanskritName   SanskritName @relation(fields: [sanskritNameId], references: [id])
}
